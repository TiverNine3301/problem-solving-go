package main

import (
	"fmt"
)

//Количество минимумов
// Найдите количество минимальных элементов в последовательности.

// Входные данные

// Вводится натуральное число N, а затем N целых чисел последовательности.

// Выходные данные

// Выведите количество минимальных элементов последовательности.

func solution1() {
	var n int
	fmt.Scan(&n)

	numbers := make([]int, n)
	minValue := 0
	for i := 0; i < n; i++ {
		fmt.Scan(&numbers[i])
		if i == 0 || numbers[i] < minValue {
			minValue = numbers[i]
		}
	}

	count := 0
	for _, num := range numbers {
		if num == minValue {
			count++
		}
	}

	fmt.Println(count)
}

// ЦИФРОВОЙ КОРЕНЬ
// Цифровой корень натурального числа — это цифра, полученная в результате итеративного процесса суммирования цифр
// на каждой итерации которого для подсчета суммы цифр берут результат, полученный на предыдущей итерации.
// Этот процесс повторяется до тех пор, пока не будет получена одна цифра.

// Например цифровой корень 65536 это 7 , потому что 6+5+5+3+6=25 и 2+5=7 .

// По данному числу определите его цифровой корень.

// ВХОДНЫЕ ДАННЫЕ

// Вводится одно натуральное число n, не превышающее 10^7

// ВЫХОДНЫЕ ДАННЫЕ
// Вывести цифровой корень числа n.

func solution2(n int) int { // в параметрах функции n - переменная из main и тип переменной
	// после параметра указан тип переменной, которую возвращает функция

	// если любое число разделить на 9, то в остатке будет цифровой корень
	if n == 0 {
		return 0
	}
	if n%9 == 0 {
		return 9
	}
	return n % 9
}

// САМОЕ БОЛЬШОЕ ЧИСЛО, КРАТНОЕ 7
// Найдите самое большее число на отрезке от a до b, кратное 7 .

// ВХОДНЫЕ ДАННЫЕ
// Вводится два целых числа a и b (a≤b).

// ВЫХОДНЫЕ ДАННЫЕ
// Найдите самое большее число на отрезке от a до b (отрезок включает в себя числа a и b), кратное 7 , или выведите "NO" - если таковых нет.

func solution3() {
	var a, b int
	fmt.Scan(&a, &b)

	for i := b; i >= a; i-- {
		if i%7 == 0 {
			fmt.Println(i)
			return
		}
	}
	fmt.Println("NO")
}

// По данному числу n закончите фразу "На лугу пасется..." одним из возможных продолжений: "n коров", "n корова", "n коровы", правильно склоняя слово "корова".

// ВХОДНЫЕ ДАННЫЕ

// Дано число n (0<n<100).

// ВЫХОДНЫЕ ДАННЫЕ

// Программа должна вывести введенное число n и одно из слов (на латинице): korov, korova или korovy, например, 1 korova, 2 korovy, 5 korov.
// Между числом и словом должен стоять ровно один пробел.

func solution4() {
	var num int
	var word string
	fmt.Scan(&num)

	if num == 1 {
		word = "korova"
	} else if num >= 2 && num <= 4 {
		word = "korovy"
	} else if num >= 5 && num <= 20 {
		word = "korov"
	} else if num%10 == 1 {
		word = "korova"
	} else if num/10 == 2 || num/10 == 3 || num/10 == 4 {
		word = "korovy"
	}

	// 1: "корова"

	// от 2 до 4: "коровы"

	// от 5 до 20: "коров"

	// от 21: если число заканчивается на "1", то "корова"

	// если число заканчивается на 2, 3, 4, то "коровы"

	fmt.Println(num, word)
}

func main() {
	solution1()

	// var n int
	// fmt.Scan(&n)

	// result := solution2(n)
	// fmt.Println(result)

	// solution3()
	solution4()
}
